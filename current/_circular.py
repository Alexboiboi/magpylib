#%% IMPORTS
from numpy import array,float64
import sys
from magPyLib.math._mathLibPrivate import angleAxisRotation
from magPyLib._lib._base import LineCurrent
from magPyLib._lib._fields.Current_CircularLoop import Bfield_CircularCurrentLoop


#%% THE CIRCUAR CL CLASS

class Circular(LineCurrent):
    """ 
    A circular line current loop with diameter `dim` and a current `curr` flowing
    in positive orientation. In the canonical basis (position=[0,0,0], angle=0,
    axis=[0,0,1]) the loop lies in the x-y plane with the origin at its center.
    Scalar input is either integer or float. Vector input format can be
    either list, tuple or array of any data type (float, int).
    
    Class Initialization (only kwargs):
    ---------------------
    
    curr : scalar [A]
        Set current in loop in units of [A]
        
    dim : float [mm]
        Set diameter of current loop in units of [mm]
        
    pos=[0,0,0] : vec3 [mm]
        Set position of the center of the current loop in units of [mm].
    
    angle=0 : scalar [deg]
        Set angle of orientation of current loop in units of [deg].
    
    axis=[0,0,1] : vec3 []
        Set axis of orientation of the current loop.
    
    Class Variables:
    ----------------
    
    current : float [A]
        Current in loop in units of [A]
        
    dimension : float [mm]
        Loop diameter in units of [mm]
    
    position : arr3 [mm]
        Position of center of loop in units of [mm]
    
    angle : float [deg]
        Angle of orientation of the current loop.
        
    axis : arr3 []
        Axis of orientation of the current loop.
        
    Class Methods:
    --------------
    setPosition(newPos) : takes vec3[mm] - returns None
        Set `newPos` as new source position.
    
    move(displacement) : takes vec3[mm] - return None
        Moves source by the `displacement` argument.
    
    setOrientation(angle,axis) : takes float[deg],vec3[] - returns None
        Set new source orientation (angle and axis) to argument values.
    
    rotate(angle,axis,CoR=[0,0,0]) : takes float[deg],vec3[],kwarg(vec3)[mm] - returns None
        Rotate the source by `angle` about an axis parallel to `axis` running
        through center of rotation `CoR`.
    
    getB(pos) : takes vec3[mm] - returns arr3[mT]
        Gives the magnetic field generated by the source in units of [mT]
        at the position `pos`.
         
    Examples:
    ---------
    >>> import magPyLib as magPy
    >>> cd = magPy.current.Circular(curr=10,dim=2)
    >>> B = cd.getB([0,0,2])
    >>> print(B)
      [0.         0.         0.56198518]
    """  
      
    def __init__(self, curr=None, dim=None, pos=(0,0,0), angle=0, axis=(0,0,1)):
        
        #inherit class lineCurrent
        #   - pos, Mrot, MrotInv, curr
        #   - moveBy, rotateBy
        LineCurrent.__init__(self,pos,angle,axis,curr)
        
        #secure input type and check input format of dim
        self.dimension = float(dim)
        if self.dimension <= 0:
            sys.exit('Bad input dimension')
        
    def getB(self,pos):
        """
        This method returns the magnetic field vector generated by the source 
        at the argument position `pos` in units of [mT]
        
        Parameters:
        ----------
        pos : vec3 [mm]
            Position where magnetic field should be determined.
        
        Returns:    
        --------
        magnetic field vector : arr3 [mT]
            Magnetic field at the argument position `pos` generated by the
            source in units of [mT].
        """
        #secure input type and check input format
        p1 = array(pos, dtype=float64, copy=False)
        
        #relative position between mag and obs
        posRel = p1 - self.position
        
        #rotate this vector into the CS of the magnet (inverse rotation)
        p21newCm = angleAxisRotation(self.angle,-self.axis,posRel) # pylint: disable=invalid-unary-operand-type
        
        #the field is well known in the magnet coordinates
        BCm = Bfield_CircularCurrentLoop(self.current,self.dimension,p21newCm)  # obtain magnetic field in Cm
        
        #rotate field vector back
        B = angleAxisRotation(self.angle,self.axis,BCm)
        
        return B
        
    

